# -*- coding: utf-8 -*-
"""variance_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NaFmctBEdr2aatIJK1fHQ9pIbu3Xn-0Z
"""



import streamlit as st
import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt
from fpdf import FPDF
import tempfile
import os

LOGO_PATH = "SE_LOGO.png"

# ---- Paste your MAIN_METRICS, PDFWithPageNumbers, and all utility functions here ----
# (Don't forget plot_top_contributors, add_chart_to_pdf, etc.)

def main():
    st.title("Variance Audit Tool")
    st.markdown("Upload BEGIN and FINAL Excel files. Choose NPV column and generate reports.")

    # File uploaders
    begin_file = st.file_uploader("Upload BEGIN Excel file (.xlsx)", type=["xlsx"])
    final_file = st.file_uploader("Upload FINAL Excel file (.xlsx)", type=["xlsx"])
    logo_file = st.file_uploader("Optional: Upload your logo", type=["png", "jpg", "jpeg"])

    # NPV column selector (customize options as needed)
    npv_options = ["NPV at 9%", "NPV at 10%"]
    npv_column = st.selectbox("Select NPV column", npv_options)

    # Save uploaded logo if present
    if logo_file:
        with open(LOGO_PATH, "wb") as f:
            f.write(logo_file.getbuffer())

    if begin_file and final_file:
        if st.button("Generate Reports"):
            # Data ingestion & processing
            begin_df = load_oneline(begin_file)
            final_df = load_oneline(final_file)

            begin_df_s = suffix_columns(begin_df, "_begin")
            final_df_s = suffix_columns(final_df, "_final")

            variance_df = begin_df_s.merge(final_df_s, on=["PROPNUM", "LEASE_NAME"], how="outer")
            for col in ['SE_RSV_CAT_begin', 'SE_RSV_CAT_final']:
                if col not in variance_df.columns:
                    variance_df[col] = 'Unknown'
            variance_df['Reserve Category Begin'] = variance_df['SE_RSV_CAT_begin']
            variance_df['Reserve Category Final'] = variance_df['SE_RSV_CAT_final']

            key_columns = [
                "Net Total Revenue ($)", "Net Operating Expense ($)", "Inital Approx WI", "Initial Approx NRI",
                "Net Res Oil (Mbbl)", "Net Res Gas (MMcf)", "Net Capex ($)", "Net Res NGL (Mbbl)", npv_column
            ]
            for col in key_columns:
                col_begin = f"{col}_begin"
                col_final = f"{col}_final"
                if col_begin in variance_df.columns and col_final in variance_df.columns:
                    variance_df[f"{col} Variance"] = variance_df[col_final] - variance_df[col_begin]

            explanation_df = generate_explanations(variance_df, npv_column)
            negative_npv_wells = identify_negative_npv_wells(variance_df, npv_column)
            nri_df = calculate_nri_wi_ratio(begin_df_s, final_df_s)

            # Excel report
            excel_io = io.BytesIO()
            with pd.ExcelWriter(excel_io, engine="xlsxwriter") as writer:
                # Call your generate_excel but use this writer, don't download
                # E.g.:
                # generate_excel(variance_df, writer, ...)
                pass  # Insert code here

            st.download_button("Download Excel Report", excel_io.getvalue(), "variance_report.xlsx")

            # PDF report
            pdf_io = io.BytesIO()
            with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmpfile:
                generate_pdf(variance_df, tmpfile.name, npv_column, explanation_df, nri_df)
                tmpfile.seek(0)
                pdf_io.write(tmpfile.read())
                pdf_io.seek(0)
            st.download_button("Download PDF Report", pdf_io, "variance_report.pdf")

            # Show plots inline
            for metric in MAIN_METRICS + [npv_column]:
                fig = plot_top_contributors(variance_df, metric)
                if fig:
                    st.pyplot(fig)

if __name__ == "__main__":
    main()
